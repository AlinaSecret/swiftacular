---

# Example: https://github.com/lorin/openstack-ansible/blob/master/services/keystone/keystone.yaml

- name: install required packages
  apt: pkg=$item state=installed update_cache=yes cache_valid_time=3600
  with_items:
    - keystone
    - python-keyring
    - mysql-server
    - python-mysqldb

- name: remove default keystone sqlite database file
  file: path=/var/lib/keystone/keystone.db state=absent

- name: copy over keystone.conf from template
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf owner=root group=root mode=0644
  notify:
    - restart keystone

# Note this would only be used in test setups
- name: setup keystone ssl
  command: creates=/etc/keystone/ssl/certs/keystone.pem keystone-manage ssl_setup --keystone-user keystone --keystone-group keystone
  notify:
    - restart keystone

- name: change mysql's bind-address
  lineinfile: dest=/etc/mysql/my.cnf regexp=^bind-address line='bind-address = 0.0.0.0'
  notify:
    - restart mysql

- name: create keystone database
  mysql_db: name=keystone state=present
  register: keystone

- name: create keystone mysql user
  mysql_user: name=keystone password={{ keystone_mysql_password }} priv=keystone.*:ALL state=present

- name: run keystone db_sync
  command: keystone-manage db_sync
  when: keystone.changed

- name: restart keystone  
  service: name=keystone state=restarted
  when: keystone.changed

 # keystone seems to take a while...
- name: wait for keystone to come back up
  wait_for: host="192.168.100.50" port=35357
  when: keystone.changed

# NOTE: Doesn't work with Essex
#- name: keystone_manage db_sync
#  keystone_manage: action=db_sync
#  when: keystone.changed

#
# Keystone endpoints
# 

# XXX FIX HARDCODED IPs XXX
# XXX FIX region? XXX
- name: Create keystone identity point
  keystone_service: name=keystone type=identity description="Keystone Identity Service" publicurl="https://192.168.100.50:5000/v2.0" internalurl="http://192.168.100.50:5000/v2.0" adminurl="http://192.168.100.50:35357/v2.0" region=RegionOne token={{ keystone_admin_token }} endpoint="https://127.0.0.1:35357/v2.0"

- name: Create EC2 compatability keystone service
  keystone_service: name=ec2 type=ec2 description="EC2 Compatability Layer" publicurl=https://192.168.100.50:8773/services/Cloud internalurl=http://192.168.100.50:8773/services/Cloud adminurl=http://192.168.100.50:8773/services/Admin region=RegionOne token={{ keystone_admin_token }} endpoint="https://127.0.0.1:35357/v2.0"

### XXX Not sure about the URLS here XXX
- name: Create object storage keystone service
  keystone_service: name=swift type=object-store description="Object Storage Service" publicurl='https://192.168.100.30/v1/AUTH_\$(tenant_id)s' internalurl='http://192.168.100.30/v1/AUTH_\$(tenant_id)s' adminurl='http://192.168.100.30/v1' region=RegionOne token={{ keystone_admin_token }} endpoint="https://127.0.0.1:35357/v2.0"

# keystone_service: name=swift type=object-store description="Object Storage Service" publicurl='https://192.168.100.30/v1/AUTH_\$(tenant_id)s' internalurl='http://192.168.100.30:8080/v1/AUTH_\$(tenant_id)s' adminurl='http://192.168.100.30:8080/v1' region=RegionOne token={{ keystone_admin_token }} endpoint="https://127.0.0.1:35357/v2.0"

#
# Create keystone tenants
# 
- name: create service keystone tenant
  keystone_user: token={{ keystone_admin_token }} tenant=service tenant_description="Service Tenant" endpoint="https://127.0.0.1:35357/v2.0"

- name: create admin keystone tenant
  keystone_user: token={{ keystone_admin_token }} tenant=admin tenant_description="Admin Tenant" endpoint="https://127.0.0.1:35357/v2.0"

- name: create demo keystone tenant
  keystone_user: token={{ keystone_admin_token }} tenant=demo tenant_description="Default Tenant" endpoint="https://127.0.0.1:35357/v2.0"

#
# Create keystone users
#
- name: create admin keystone user
  keystone_user: token={{ keystone_admin_token }} user={{ keystone_admin_user }} tenant=demo password={{ keystone_admin_user_password }} endpoint="https://127.0.0.1:35357/v2.0"

- name: create swift service keystone user
  keystone_user: token={{ keystone_admin_token }} user=swift tenant=service password={{ keystone_generic_service_password }} endpoint="https://127.0.0.1:35357/v2.0"

- name: create ec2 service keystone user
  keystone_user: token={{ keystone_admin_token }} user=ec2 tenant=service password={{ keystone_generic_service_password }} endpoint="https://127.0.0.1:35357/v2.0"

- name: create default keystone user
  keystone_user: token={{ keystone_admin_token }} user=curtis tenant=demo password=passw0rd endpoint="https://127.0.0.1:35357/v2.0"

# 
# Keystone create and apply roles
#
- name: create an admin role and add the admin to it
  keystone_user: token={{ keystone_admin_token }} role={{ keystone_admin_role }} user={{ keystone_admin_user }} tenant={{ keystone_admin_tenant }} endpoint="https://127.0.0.1:35357/v2.0"

- name: create an admin role and add the admin to it
  keystone_user: token={{ keystone_admin_token }} role={{ keystone_admin_role }} user=swift tenant=service endpoint="https://127.0.0.1:35357/v2.0"

- name: create an admin role and add the admin to it
  keystone_user: token={{ keystone_admin_token }} role={{ keystone_admin_role }} user=ec2 tenant=service endpoint="https://127.0.0.1:35357/v2.0"

- name: create a swiftoperator role and add the demo user to it
  keystone_user: token={{ keystone_admin_token }} role=swiftoperator user=curtis tenant=demo endpoint="https://127.0.0.1:35357/v2.0"

#
# Run some tests
# 

- name: test keystone with user-list
  #shell: export SERVICE_TOKEN={{ keystone_admin_token }}; export SERVICE_ENDPOINT=http://192.168.100.50:35357/v2.0; keystone user-list
  shell: keystone --insecure --token {{ keystone_admin_token }} --endpoint https://192.168.100.50:35357/v2.0 user-list
  when: keystone.changed
