#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Ansible module to add boundary meters.

(c) 2013, curtis <curtis@serverascode.com>

This file is part of Ansible

Ansible is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ansible is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
"""

import json
import datetime
import base64
import swiftclient
import pprint
import os
from swift.common.ring import RingBuilder
from swift.common.ring.utils import parse_search_value, parse_args, \
    build_dev_from_opts


DOCUMENTATION = '''

module: swift_ring_builder_add
short_description: Add devices to swift zones
description:
    - Add devices to swift zones with where each node is a zone
version_added: "1.3"
author: curtis@serverascode.com
requirements:
    - Python swiftclient
options:
    region:
        description:
            - What region to place the devices in
        required: true
    storage_servers:
        description:
            - An ansible group of storage servers/nodes
        required: true
    disks:
        description:
            - number of disks to add to each storage server/node
        required: true
'''

EXAMPLES='''
- name: Add swift disks to rings
  swift_ring_builder_add: name={{ inventory_hostname }} disks=10

'''

def create_ring_devices (region, hostname, disks, zone):

    # XXX Should be a datatype of somekind 'type':'port' XXX
    for type in ['object', 'container', 'account']:
        if type == 'object':
            port = 6000
        elif type == 'container':
            port = 6001
        elif type == 'account':
            port = 6002
        else:
            # XXX Shouldn't get here XXX
            return 1, 'Incorrected builder type'

        # setup the builder
        builder_file = '/etc/swift/' + str(type) + '.builder'
        builder = RingBuilder.load(builder_file)

        for j in xrange(int(disks)):

            #ip_address = ansible_default_ipv4.address
            # XXX how to get ip address? XXX
            ip_address = hostname
        
            # think device will just be j
            device = j
            # just set weight to 100 for testing/now
            weight = 100
            # not sure what meta is supposed to be
            meta = ''
            # in the swift-rinb-builder app it seems to set repolication_ip to 
            # ip of the variable doesn't exist
            replication_ip = ip_address
            replication_port = port

            
            dev = { 'region': region, 'zone': 'z' + zone, 'ip': ip_address ,
                    'port': port, 'device': device, 'meta': meta,
                    'replication_ip': replication_ip,
                    'replication_port': replication_port, 'weight': weight }

                # XXX Should check to see if device exists already like in swift-ring-builder code XXX
            
            dev_id = builder.add_dev(dev)

            # what are we saving here?
            builder.save(str(type))

            #if not dev_id:
            #    return 1, "creating dev failed"
            return 0, 'Device with id %s was created' % dev_id



    return 0, 'Swift ring devices created'

def main():

    #if not HAS_URLLIB2:
    #    module.fail_json(msg="urllib2 is not installed")

    module = AnsibleModule(
        argument_spec=dict(
        hostname=dict(required=False),  
        zone=dict(required=True),
        disks=dict(required=True),
        state=dict(required=False),
        region=dict(required=False),
        )
    )

    zone = module.params['zone']
    hostname = module.params['hostname']
    state = module.params['state']
    disks = module.params['disks']
    region = module.params['region']

    if not region:
        region = None

    (rc, result) = create_ring_devices(region, hostname, disks, zone)


    if rc != 0:
        module.fail_json(msg=result)

    module.exit_json(status=result,changed=True)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()